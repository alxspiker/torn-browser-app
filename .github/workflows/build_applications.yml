name: Build Capacitor App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - platform: android
            os: ubuntu-latest
            artifact_path: frontend/android/app/build/outputs/apk/debug/app-debug.apk
            artifact_name: app-android.apk
          - platform: ios
            os: macos-latest
            artifact_path: frontend/ios/build/Build/Products/Debug-iphonesimulator/App.app
            artifact_name: app-ios.app
          - platform: electron
            os: windows-latest
            artifact_path: frontend/electron/dist # electron-builder default output
            artifact_name: electron-app
      fail-fast: false

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      working-directory: backend

    - name: Fix package.json (Linux/macOS)
      if: runner.os == 'Linux' || runner.os == 'macOS'
      run: |
        if [[ "$RUNNER_OS" == "macOS" ]]; then
          sed -i '' 's/"@capacitor\/storage": "\^5.0.6"/"@capacitor\/preferences": "\^5.0.6"/g' package.json
          sed -i '' 's/import { Storage } from '"'"'@capacitor\/storage'"'"'/import { Preferences } from '"'"'@capacitor\/preferences'"'"'/g' src/js/app.js
          sed -i '' 's/Storage\./Preferences\./g' src/js/app.js
        else
          sed -i 's/"@capacitor\/storage": "\^5.0.6"/"@capacitor\/preferences": "\^5.0.6"/g' package.json
          sed -i 's/import { Storage } from '"'"'@capacitor\/storage'"'"'/import { Preferences } from '"'"'@capacitor\/preferences'"'"'/g' src/js/app.js
          sed -i 's/Storage\./Preferences\./g' src/js/app.js
        fi
      shell: bash
      working-directory: frontend

    - name: Fix package.json (Windows)
      if: matrix.platform == 'electron'
      run: |
        (Get-Content package.json) -replace '"@capacitor/storage": "\^5.0.6"', '"@capacitor/preferences": "^5.0.6"' | Set-Content package.json
        (Get-Content src/js/app.js) -replace 'import { Storage } from ''@capacitor/storage''', 'import { Preferences } from ''@capacitor/preferences''' | Set-Content src/js/app.js
        (Get-Content src/js/app.js) -replace 'Storage\.', 'Preferences.' | Set-Content src/js/app.js
      shell: pwsh
      working-directory: frontend

    - name: Install Node.js dependencies
      run: |
        npm install
        npm install -D typescript
        if ("${{ matrix.platform }}" -eq "electron") {
          npm install -D @capacitor/electron electron electron-builder
        }
      # Let's use default shell for npm install on Windows too, which might be cmd
      shell: ${{ runner.os == 'Windows' && 'cmd' || 'bash' }}
      working-directory: frontend

    - name: Build frontend (web assets)
      run: npm run build
      working-directory: frontend

    - name: Set up JDK (Android only)
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
      if: matrix.platform == 'android'

    - name: Install Cocoapods (iOS only)
      run: sudo gem install cocoapods
      if: matrix.platform == 'ios'

    # Use cmd shell specifically for Windows Capacitor steps
    - name: Add Capacitor platform ${{ matrix.platform }}
      run: npx cap add ${{ matrix.platform }}
      working-directory: frontend
      shell: ${{ runner.os == 'Windows' && 'cmd' || 'bash' }}

    - name: Sync Capacitor assets
      run: npx cap sync ${{ matrix.platform }}
      working-directory: frontend
      shell: ${{ runner.os == 'Windows' && 'cmd' || 'bash' }}

    - name: Build Android APK
      if: matrix.platform == 'android'
      run: |
        chmod +x ./gradlew
        ./gradlew assembleDebug
      working-directory: frontend/android

    - name: Build iOS app
      if: matrix.platform == 'ios'
      run: |
        pod install --project-directory=App --repo-update
        xcodebuild -workspace App/App.xcworkspace -scheme App -configuration Debug -sdk iphonesimulator -derivedDataPath build build
      working-directory: frontend/ios

    - name: Build Electron app
      if: matrix.platform == 'electron'
      # Run electron-builder directly from within the electron sub-project
      run: npx electron-builder build --win --config.asarUnpack=node_modules/@capacitor/electron/**/*
      working-directory: frontend/electron # Run from electron subdir
      shell: cmd # Try cmd for the build step too on Windows

    - name: Upload artifact (${{ matrix.artifact_name }})
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.artifact_path }}
        if-no-files-found: error
